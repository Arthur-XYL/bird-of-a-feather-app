Index: app/src/main/java/com/swift/birdsofafeather/SearchStudentWithSimilarClasses.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.swift.birdsofafeather;\n\n\nimport android.app.AlertDialog;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.graphics.Bitmap;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.LinearLayout;\nimport android.widget.Spinner;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.google.android.gms.nearby.Nearby;\nimport com.google.android.gms.nearby.messages.Message;\nimport com.google.android.gms.nearby.messages.MessageListener;\nimport com.swift.birdsofafeather.model.db.AppDatabase;\nimport com.swift.birdsofafeather.model.db.Class;\nimport com.swift.birdsofafeather.model.db.SessionStudent;\nimport com.swift.birdsofafeather.model.db.SessionWithStudents;\nimport com.swift.birdsofafeather.model.db.Student;\nimport com.swift.birdsofafeather.model.db.StudentWithClasses;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.PriorityQueue;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SearchStudentWithSimilarClasses extends AppCompatActivity {\n    private static final String TAG = \"BluetoothActivity\";\n    private static final int currentYear = 2022;\n    private static final String currentQuarter = \"wi\";\n\n    private MessageListener realListener;\n    private Message myStudentData;\n\n    private Spinner filterSpinner;\n//    private Spinner thisYearSpinner;\n//    private Spinner thisQuarterSpinner;\n    private AppDatabase db;\n\n    private UUID currentSessionId;\n\n    private UUID userId;\n    private StudentWithClasses user;\n    private Set<Class> userClasses;\n\n    private RecyclerView studentsRecyclerView;\n    private RecyclerView.LayoutManager studentsLayoutManager;\n    private StudentViewAdapter studentsViewAdapter;\n    private final ExecutorService backgroundThreadExecutor = Executors.newSingleThreadExecutor();\n\n    private boolean searching = false;\n    private boolean fromStartPage = false;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_student_with_similar_classes);\n\n        filterSpinner = findViewById(R.id.filter_select);\n        ArrayAdapter<CharSequence> filterAdapter = ArrayAdapter.createFromResource(this,\n                R.array.filters_array, android.R.layout.simple_spinner_item);\n        filterAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        filterSpinner.setAdapter(filterAdapter);\n\n//        thisYearSpinner = findViewById(R.id.year_select);\n//        ArrayAdapter<CharSequence> yearAdapter = ArrayAdapter.createFromResource(this,\n//                R.array.years_array, android.R.layout.simple_spinner_item);\n//        yearAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n//        thisYearSpinner.setAdapter(yearAdapter);\n//\n//        thisQuarterSpinner = findViewById(R.id.quarter_select);\n//        ArrayAdapter<CharSequence> quarterAdapter = ArrayAdapter.createFromResource(this,\n//                R.array.quarters_array, android.R.layout.simple_spinner_item);\n//        quarterAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n//        thisQuarterSpinner.setAdapter(quarterAdapter);\n\n        db = AppDatabase.singleton(getApplicationContext());\n\n        SharedPreferences preferences = Utils.getSharedPreferences(this);\n\n        // get session and user id from preferences\n        if(preferences.contains(\"current_session_id\")) {\n            String sessionUUIDString = preferences.getString(\"current_session_id\", \"\");\n            currentSessionId = UUID.fromString(sessionUUIDString);\n        }\n\n        String UUIDString = preferences.getString(\"student_id\", \"\");\n        userId = UUID.fromString(UUIDString);\n\n        user = db.studentWithClassesDao().getStudent(userId);\n        userClasses = user.getClasses();\n\n        clearRecycler();\n        setUpNearby();\n    }\n\n    protected void refreshRecycler(){\n        backgroundThreadExecutor.submit(() -> {\n            List<Student> userClassmates = findPriorClassmates();\n\n            runOnUiThread(() -> {\n                // Set up the recycler view to show our database contents\n                studentsRecyclerView = findViewById(R.id.persons_view);\n\n                studentsLayoutManager = new LinearLayoutManager(this);\n                studentsRecyclerView.setLayoutManager(studentsLayoutManager);\n\n                studentsViewAdapter = new StudentViewAdapter(userClassmates);\n                studentsRecyclerView.setAdapter(studentsViewAdapter);\n            });\n        });\n    }\n\n    protected void clearRecycler(){\n        backgroundThreadExecutor.submit(() -> runOnUiThread(() -> {\n            // Set up the recycler view to show our database contents\n            studentsRecyclerView = findViewById(R.id.persons_view);\n\n            studentsLayoutManager = new LinearLayoutManager(this);\n            studentsRecyclerView.setLayoutManager(studentsLayoutManager);\n\n            studentsViewAdapter = new StudentViewAdapter(new ArrayList<>());\n            studentsRecyclerView.setAdapter(studentsViewAdapter);\n        }));\n    }\n\n    public void onToggleClicked(View view) {\n        if(searching)\n            this.onStopClicked();\n        else\n            this.onStartClicked();\n        searching = !searching;\n    }\n\n    protected void startNearby(){\n        Nearby.getMessagesClient(this).subscribe(realListener);\n        Nearby.getMessagesClient(this).publish(myStudentData);\n        Log.d(TAG, \"Started Nearby Subscribing\");\n        Log.d(TAG, \"Started Nearby Publishing\");\n    }\n\n    protected void stopNearby(){\n        Nearby.getMessagesClient(this).unsubscribe(realListener);\n        Nearby.getMessagesClient(this).unpublish(myStudentData);\n        Log.d(TAG, \"Stopped Nearby Subscribing\");\n        Log.d(TAG, \"Stopped Nearby Publishing\");\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        stopNearby();\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n\n        SharedPreferences preferences = Utils.getSharedPreferences(this);\n        if(preferences.contains(\"current_session_id\")) {\n            String sessionUUIDString = preferences.getString(\"current_session_id\", \"\");\n            currentSessionId = UUID.fromString(sessionUUIDString);\n        }\n\n        if(this.fromStartPage){\n            this.startNearby();\n            this.fromStartPage = false;\n        }\n\n        refreshRecycler();\n    }\n\n    public void onAddStudentsClicked(View view){\n        Intent addStudentsIntent = new Intent(this, AddStudentActivity.class);\n        startActivity(addStudentsIntent);\n    }\n\n    public void onAddClassesClicked(View view){\n        Intent addClassesIntent = new Intent(this, AddClassesActivity.class);\n        startActivity(addClassesIntent);\n    }\n\n    protected void onStartClicked(){\n        Button toggle_button = findViewById(R.id.toggle_search_button);\n        toggle_button.setText(\"Stop Search\");\n        this.fromStartPage = true;\n        Intent intent3 = new Intent(this, StartSearchPage.class);\n        startActivity(intent3);\n    }\n\n    protected void onStopClicked(){\n        Button toggle_button = findViewById(R.id.toggle_search_button);\n        toggle_button.setText(\"Start Search\");\n        this.stopNearby();\n\n        if (!(db.sessionDao().checkNamed(currentSessionId))) {\n            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);\n\n            // set title\n            alertDialogBuilder.setTitle(\"Save your class\");\n\n            // set dialog message\n            alertDialogBuilder\n                    .setMessage(\"Name it as a class you take this quarter or give it a new name\")\n                    .setCancelable(false)\n                    .setPositiveButton(\"Choose a class\", null)\n                    .setNegativeButton(\"Give it a name\", (dialog, id) -> {\n                        AlertDialog.Builder alertDialogBuilder1 = new AlertDialog.Builder(SearchStudentWithSimilarClasses.this);\n\n                        LinearLayout layout = new LinearLayout(SearchStudentWithSimilarClasses.this);\n                        layout.setOrientation(LinearLayout.VERTICAL);\n\n                        final EditText editTextCourse = new EditText(SearchStudentWithSimilarClasses.this);\n                        editTextCourse.setHint(\"Subject + Course Number\");\n                        layout.addView(editTextCourse);\n\n\n                        // set title\n                        alertDialogBuilder1.setTitle(\"Save your class\");\n                        alertDialogBuilder1.setView(layout);\n\n                        // set dialog message\n                        alertDialogBuilder1\n                                .setCancelable(false)\n                                .setPositiveButton(\"Save\", null);\n\n                        // create alert dialog\n                        AlertDialog alertDialog = alertDialogBuilder1.create();\n\n                        // show it\n                        alertDialog.show();\n\n                        Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);\n                        positiveButton.setOnClickListener(view -> {\n\n                            String className = editTextCourse.getText().toString().toLowerCase();\n                            if (className.length() > 0) {\n                                db.sessionDao().updateName(currentSessionId, className);\n                                Log.d(TAG, \"Named session to \" + db.sessionDao().getName(currentSessionId));\n                                Toast.makeText(SearchStudentWithSimilarClasses.this, \"save as new session\", Toast.LENGTH_SHORT).show();\n                                alertDialog.dismiss();\n                            }\n                            else {\n                                Toast.makeText(getApplicationContext(), \"Please enter subject and course number!\", Toast.LENGTH_SHORT).show();\n                            }\n                        });\n                    });\n\n            // create alert dialog\n            AlertDialog alertDialog = alertDialogBuilder.create();\n\n            // show it\n            alertDialog.show();\n\n            Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);\n            positiveButton.setOnClickListener(view -> {\n\n\n                AlertDialog.Builder alertDialogBuilder12 = new AlertDialog.Builder(SearchStudentWithSimilarClasses.this);\n\n                final Spinner classSpinner = new Spinner(SearchStudentWithSimilarClasses.this);\n\n                List<String> spinnerArray = new ArrayList<>();\n\n                userClasses = user.getClasses();\n                for (Class course : userClasses) {\n\n                    if (course.getYear() == currentYear && course.getQuarter().equals(currentQuarter)) {\n                        String courseString = course.getSubject() + \" \" + course.getCourseNumber();\n                        spinnerArray.add(courseString);\n                    }\n                }\n\n                if (!spinnerArray.isEmpty()) {\n                    ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>\n                            (SearchStudentWithSimilarClasses.this, android.R.layout.simple_spinner_item, spinnerArray); //selected item will look like a spinner set from XML\n                    spinnerArrayAdapter.setDropDownViewResource(android.R.layout\n                            .simple_spinner_dropdown_item);\n                    classSpinner.setAdapter(spinnerArrayAdapter);\n\n                    // set title\n                    alertDialogBuilder12.setTitle(\"Choose a class\");\n                    alertDialogBuilder12.setView(classSpinner);\n\n                    alertDialogBuilder12\n                            .setCancelable(false)\n                            .setPositiveButton(\"Enter\", (dialogInterface, i) -> {\n                                String className = classSpinner.getSelectedItem().toString().toLowerCase();\n                                db.sessionDao().updateName(currentSessionId, className);\n                                Log.d(TAG, \"Named session to \" + db.sessionDao().getName(currentSessionId));\n                                Toast.makeText(SearchStudentWithSimilarClasses.this, \"save as a this quarter's session\", Toast.LENGTH_SHORT).show();\n                                alertDialog.dismiss();\n                            });\n\n                    // create alert dialog\n                    AlertDialog alertDialog1 = alertDialogBuilder12.create();\n\n                    // show it\n                    alertDialog1.show();\n                }\n                else {\n                    Toast.makeText(getApplicationContext(), \"You don't have class in this quarter!\", Toast.LENGTH_SHORT).show();\n                }\n            });\n        }\n        else {\n            Toast.makeText(SearchStudentWithSimilarClasses.this, \"save to existing session\", Toast.LENGTH_SHORT).show();\n        }\n\n        SharedPreferences preferences = Utils.getSharedPreferences(this);\n        SharedPreferences.Editor edit = preferences.edit();\n        edit.remove(\"current_session_id\");\n        edit.apply();\n        clearRecycler();\n    }\n\n    protected void setUpNearby(){\n        this.realListener = new MessageListener() {\n            @Override\n            public void onFound(@NonNull Message message) {\n                String messageContent = new String(message.getContent());\n                Log.d(TAG, messageContent);\n                String[] decodedMessage = messageContent.split(\",\");\n\n                UUID studentUUID = UUID.fromString(decodedMessage[0]);\n                String name = decodedMessage[1];\n                String pictureURL = decodedMessage[2];\n\n                // if student exists in database\n                if(db.studentDao().checkExists(studentUUID)){\n                    SessionStudent studentInSession = new SessionStudent(currentSessionId, studentUUID);\n                    db.sessionStudentDao().insert(studentInSession);\n                    return;\n                }\n\n                Bitmap image = Utils.urlToBitmap(SearchStudentWithSimilarClasses.this, pictureURL);\n\n                Student classmate = new Student(studentUUID, name, image);\n                db.studentDao().insert(classmate);\n\n                SessionStudent studentInSession = new SessionStudent(currentSessionId, studentUUID);\n                db.sessionStudentDao().insert(studentInSession);\n\n                for(int i = 3; i < decodedMessage.length; i+=6) {\n                    UUID classId = UUID.fromString(decodedMessage[i]);\n                    int year = Integer.parseInt(decodedMessage[i + 1]);\n                    String quarter = decodedMessage[i + 2];\n                    String subject = decodedMessage[i + 3];\n                    String courseNumber = decodedMessage[i + 4];\n                    String courseSize = decodedMessage[i + 5];\n\n                    Class newClass = new Class(classId, studentUUID, year, quarter, subject, courseNumber, courseSize);\n                    db.classesDao().insert(newClass);\n                }\n\n                int listPosition = calculatePosition(classmate);\n\n                // Set all score for this new student\n                StudentWithClasses studentWithClasses = db.studentWithClassesDao().getStudent(studentUUID);\n                setAllScore(studentWithClasses);\n\n                studentsViewAdapter.addStudent(listPosition, studentWithClasses.getStudent());\n            }\n\n            @Override\n            public void onLost(@NonNull Message message) {\n                Log.d(TAG, \"Lost sight of message: \" + new String(message.getContent()));\n            }\n        };\n\n        SharedPreferences preferences = Utils.getSharedPreferences(this);\n\n        String studentUUIDString = preferences.getString(\"student_id\", \"default\");\n        UUID studentUUID = UUID.fromString(studentUUIDString);\n        List<Class> classes = db.classesDao().getForStudent(studentUUID);\n\n        String encodedString = Utils.encodeStudent(this) + \",\" + Utils.encodeClasses(classes);\n        myStudentData = new Message(encodedString.getBytes(StandardCharsets.UTF_8));\n    }\n\n    protected List<Student> findPriorClassmates() {\n        SessionWithStudents mySession = db.sessionWithStudentsDao().getSession(currentSessionId);\n        List<Student> sessionStudents = mySession.getStudents();\n        sessionStudents.remove(user.getStudent());\n\n\n        List<StudentWithClasses> studentList = new ArrayList<>();\n        for(Student student : sessionStudents) {\n            studentList.add(db.studentWithClassesDao().getStudent(student.getId()));\n        }\n\n        List<Student> commonClassmates = new ArrayList<>();\n\n        PriorityQueue<Student> pq;\n        String filterString = filterSpinner.getSelectedItem().toString();\n//        String thisYearString = thisYearSpinner.getSelectedItem().toString();\n//        String thisQuarterString = thisQuarterSpinner.getSelectedItem().toString().toLowerCase();\n\n        switch (filterString) {\n            case \"prioritize recent\":\n                pq = new PriorityQueue<>(1000, new StudentClassRecencyComparator());\n                break;\n            case \"prioritize small classes\":\n                pq = new PriorityQueue<>(1000, new StudentClassSizeComparator());\n                break;\n            case \"this quarter only\":\n                return findStudentsThisQuarter(studentList, commonClassmates);\n            default:\n                pq = new PriorityQueue<>(1000, new StudentClassComparator());\n        }\n\n        for (StudentWithClasses classmate : studentList) {\n            if (countSimilarClasses(classmate) > 0) {\n                pq.add(classmate.getStudent());\n            }\n        }\n        while (!pq.isEmpty()) {\n            commonClassmates.add(Objects.requireNonNull(pq.poll()));\n        }\n        return commonClassmates;\n    }\n\n    public List<Student> findStudentsThisQuarter(List<StudentWithClasses> studentList, List<Student> commonClassmates) {\n        PriorityQueue<Student> pq = new PriorityQueue<>(1000, new StudentThisQuarterComparator());\n\n        for(StudentWithClasses student : studentList) {\n            if (student.getStudent().getQuarterScore() > 0) {\n                pq.add(student.getStudent());\n            }\n        }\n        while (!pq.isEmpty()) {\n            commonClassmates.add(Objects.requireNonNull(pq.poll()));\n        }\n\n        return commonClassmates;\n    }\n\n    public void setAllScore(StudentWithClasses student) {\n        setClassScore(student);\n        setSizeScore(student);\n        setRecencyScore(student);\n        setQuarterScore(student);\n    }\n\n    public void setClassScore(StudentWithClasses student){\n        int classScore = countSimilarClasses(student);\n        db.studentDao().updateClassScore(student.getStudent().getId(), classScore);\n    }\n\n    public void setSizeScore(StudentWithClasses student) {\n        Set<Class> classes = getSimilarClasses(student);\n        double sizeScore = 0;\n\n        for (Class course : classes) {\n            sizeScore += Utils.getClassSizeScore(course.getCourseSize());\n        }\n\n        db.studentDao().updateSizeScore(student.getStudent().getId(), sizeScore);\n    }\n\n    public void setRecencyScore(StudentWithClasses student) {\n        int thisQuarterScore = Utils.getRecencyScore(currentQuarter);\n\n        Set<Class> classes = getSimilarClasses(student);\n        int recencyScore = 0;\n        for (Class course : classes) {\n            int year = course.getYear();\n            int quarter = Utils.getRecencyScore(course.getQuarter());\n            int score = (currentYear - year) * 4 + (thisQuarterScore - quarter);\n            recencyScore += score > 4 ? 1 : 5 - score;\n        }\n\n        db.studentDao().updateRecencyScore(student.getStudent().getId(), recencyScore);\n    }\n\n    public void setQuarterScore(StudentWithClasses student) {\n        Set<Class> classes = getSimilarClasses(student);\n        int quarterScore = 0;\n        for (Class course : classes) {\n            if (course.getYear() == currentYear && course.getQuarter().equals(currentQuarter)) {\n                quarterScore++;\n            }\n        }\n        db.studentDao().updateClassScore(student.getStudent().getId(), quarterScore);\n    }\n\n    protected int countSimilarClasses(StudentWithClasses classmate){\n        Set<Class> mateClasses = classmate.getClasses();\n\n        mateClasses.retainAll(userClasses);\n\n        return mateClasses.size();\n    }\n\n    protected Set<Class> getSimilarClasses(StudentWithClasses classmate) {\n        Set<Class> mateClasses = classmate.getClasses();\n        mateClasses.retainAll(userClasses);\n        return mateClasses;\n    }\n\n    public int calculatePosition (Student classmate) {\n        user = db.studentWithClassesDao().getStudent(userId);\n        userClasses = user.getClasses();\n\n        List<Student> userClassmates = findPriorClassmates();\n        for(int i = 0; i < userClassmates.size(); i++) {\n            if(userClassmates.get(i).getId().equals(classmate.getId())){\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n\nclass StudentClassComparator implements Comparator<Student> {\n    @Override\n    public int compare(Student student1, Student student2) {\n        return student1.getClassScore() - student2.getClassScore();\n    }\n}\n\n\nclass StudentClassSizeComparator implements Comparator<Student> {\n    @Override\n    public int compare(Student student1, Student student2) {\n        return (int) (student1.getSizeScore() - student2.getSizeScore());\n    }\n}\n\n\nclass StudentClassRecencyComparator implements Comparator<Student> {\n    @Override\n    public int compare(Student student1, Student student2) {\n        return student1.getRecencyScore() - student2.getRecencyScore();\n    }\n}\n\nclass StudentThisQuarterComparator implements Comparator<Student> {\n    @Override\n    public int compare(Student student1, Student student2) {\n        return student1.getQuarterScore() - student2.getQuarterScore();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/swift/birdsofafeather/SearchStudentWithSimilarClasses.java b/app/src/main/java/com/swift/birdsofafeather/SearchStudentWithSimilarClasses.java
--- a/app/src/main/java/com/swift/birdsofafeather/SearchStudentWithSimilarClasses.java	(revision 9a28162fd5314c89f59a9dea228f7ceb22d6bae4)
+++ b/app/src/main/java/com/swift/birdsofafeather/SearchStudentWithSimilarClasses.java	(date 1646873401801)
@@ -460,7 +460,8 @@
     }
 
     public void setClassScore(StudentWithClasses student){
-        int classScore = countSimilarClasses(student);
+        // int classScore = countSimilarClasses(student);
+        int classScore = 20;
         db.studentDao().updateClassScore(student.getStudent().getId(), classScore);
     }
 
