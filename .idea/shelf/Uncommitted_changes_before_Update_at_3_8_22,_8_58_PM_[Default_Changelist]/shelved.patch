Index: app/src/main/java/com/swift/birdsofafeather/Utils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.swift.birdsofafeather;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Paint;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.provider.ContactsContract;\r\nimport android.transition.Transition;\r\nimport android.util.Base64;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.request.RequestOptions;\r\nimport com.swift.birdsofafeather.model.db.Class;\r\nimport com.swift.birdsofafeather.model.db.Student;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\nimport java.util.PriorityQueue;\r\nimport java.util.Set;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\n\r\npublic class Utils {\r\n    public static int MESSAGE_READ = 0;\r\n    public static int MESSAGE_WRITE = 1;\r\n\r\n    public static boolean isEmpty(String str) {\r\n        if (str == null) {\r\n            return true;\r\n        } else return str.equals(\"\");\r\n    }\r\n\r\n    public static int getWriteFrequency() {\r\n        return 10;\r\n    }\r\n\r\n    public static int toIntNullsafe(String str) {\r\n        if (isEmpty(str)) {\r\n            return 0;\r\n        }\r\n        return Integer.parseInt(str);\r\n    }\r\n\r\n    public static boolean hasPermission(Context context, String permission) {\r\n        int res = context.checkSelfPermission(permission);\r\n        return (res == PackageManager.PERMISSION_GRANTED);\r\n    }\r\n\r\n    public static void showAlert(Activity activity, String message) {\r\n        AlertDialog.Builder alertBuilder = new AlertDialog.Builder(activity);\r\n\r\n        alertBuilder.setTitle(\"Alert!\")\r\n                .setMessage(message)\r\n                .setPositiveButton(\"OK\", (dialog, id) -> {\r\n                    dialog.cancel();\r\n                })\r\n                .setCancelable(true);\r\n\r\n        AlertDialog alertDialog = alertBuilder.create();\r\n        alertDialog.show();\r\n    }\r\n\r\n    public static SharedPreferences getSharedPreferences(Context context) {\r\n        SharedPreferences preferences = context.getSharedPreferences(\r\n                context.getApplicationContext().getString(R.string.preference_file_key), MODE_PRIVATE);\r\n        return preferences;\r\n    }\r\n\r\n    public static Bitmap urlToBitmap(Context context, String URL) {\r\n        ExecutorService backgroundThreadExecutor = Executors.newSingleThreadExecutor();\r\n        Future<Bitmap> bmap;\r\n\r\n        bmap = backgroundThreadExecutor.submit(() -> {\r\n            try {\r\n                return Glide\r\n                        .with(context)\r\n                        .asBitmap()\r\n                        .load(URL)\r\n                        .apply(new RequestOptions()\r\n                                .override(200, 200)\r\n                                .centerCrop())\r\n                        .submit()\r\n                        .get();\r\n            } catch (Exception e){\r\n                return BitmapFactory.decodeResource(context.getResources(), R.drawable.logo);\r\n            }\r\n        });\r\n\r\n        try {\r\n            return bmap.get();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static String bitmapToString(Bitmap bmap) {\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        bmap.compress(Bitmap.CompressFormat.JPEG, 100, baos);\r\n        byte[] b = baos.toByteArray();\r\n\r\n        String encodedImage = Base64.encodeToString(b, Base64.DEFAULT);\r\n\r\n        return encodedImage;\r\n    }\r\n\r\n    public static Bitmap stringToBitmap(String bmap_string) {\r\n        byte[] b = Base64.decode(bmap_string, Base64.DEFAULT);\r\n        Bitmap bitmap = BitmapFactory.decodeByteArray(b, 0, b.length);\r\n\r\n        return bitmap;\r\n    }\r\n\r\n    public static String encodeStudent(Context context) {\r\n        SharedPreferences preferences = getSharedPreferences(context);\r\n\r\n        String studentUUIDString = preferences.getString(\"student_id\", \"default\");\r\n        String studentName = preferences.getString(\"first_name\", \"default\");\r\n        String photoURL = preferences.getString(\"image_url\", \"default\");\r\n\r\n        return studentUUIDString + \",\" + studentName + \",\" + photoURL;\r\n    }\r\n\r\n    public static String encodeClasses(List<Class> classes) {\r\n        String res = \"\";\r\n\r\n        for (Class c : classes) {\r\n            res += \",\" + c;\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    public static Bitmap createImage(int width, int height, int color) {\r\n        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\r\n        Canvas canvas = new Canvas(bitmap);\r\n        Paint paint = new Paint();\r\n        paint.setColor(color);\r\n        canvas.drawRect(0F, 0F, (float) width, (float) height, paint);\r\n        return bitmap;\r\n    }\r\n\r\n    public static int getClassSize(String classSize) {\r\n        if (classSize.equals(\"tiny\")) {\r\n            return 1;\r\n        }\r\n        else if (classSize.equals(\"small\")) {\r\n            return 2;\r\n        }\r\n        else if (classSize.equals(\"medium\")) {\r\n            return 3;\r\n        }\r\n        else if (classSize.equals(\"large\")) {\r\n            return 4;\r\n        }\r\n        else if (classSize.equals(\"huge\")) {\r\n            return 5;\r\n        }\r\n        else if (classSize.equals(\"gigantic\")) {\r\n            return 6;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/swift/birdsofafeather/Utils.java b/app/src/main/java/com/swift/birdsofafeather/Utils.java
--- a/app/src/main/java/com/swift/birdsofafeather/Utils.java	
+++ b/app/src/main/java/com/swift/birdsofafeather/Utils.java	
@@ -159,24 +159,24 @@
         return bitmap;
     }
 
-    public static int getClassSize(String classSize) {
-        if (classSize.equals("tiny")) {
-            return 1;
+    public static double getClassSizeWeight(String classSize) {
+        if (classSize.equals("Tiny")) {
+            return 1.00;
         }
-        else if (classSize.equals("small")) {
-            return 2;
+        else if (classSize.equals("Small")) {
+            return 0.33;
         }
-        else if (classSize.equals("medium")) {
-            return 3;
+        else if (classSize.equals("Medium")) {
+            return 0.18;
         }
-        else if (classSize.equals("large")) {
-            return 4;
+        else if (classSize.equals("Large")) {
+            return 0.10;
         }
-        else if (classSize.equals("huge")) {
-            return 5;
+        else if (classSize.equals("Huge")) {
+            return 0.06;
         }
-        else if (classSize.equals("gigantic")) {
-            return 6;
+        else if (classSize.equals("Gigantic")) {
+            return 0.03;
         } else {
             return 0;
         }
Index: app/src/main/java/com/swift/birdsofafeather/SearchStudentWithSimilarClasses.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.swift.birdsofafeather;\n\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport android.app.AlertDialog;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.graphics.Bitmap;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.LinearLayout;\nimport android.widget.Spinner;\nimport android.widget.Toast;\n\nimport com.google.android.gms.nearby.Nearby;\nimport com.google.android.gms.nearby.messages.Message;\nimport com.google.android.gms.nearby.messages.MessageListener;\nimport com.swift.birdsofafeather.model.db.AppDatabase;\nimport com.swift.birdsofafeather.model.db.Class;\nimport com.swift.birdsofafeather.model.db.Session;\nimport com.swift.birdsofafeather.model.db.SessionStudent;\nimport com.swift.birdsofafeather.model.db.SessionStudentDao;\nimport com.swift.birdsofafeather.model.db.SessionWithStudents;\nimport com.swift.birdsofafeather.model.db.Student;\nimport com.swift.birdsofafeather.model.db.StudentWithClasses;\n\nimport java.lang.reflect.Array;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.PriorityQueue;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SearchStudentWithSimilarClasses extends AppCompatActivity {\n    private static final String TAG = \"BluetoothActivity\";\n    private static final String currentYear = \"2022\";\n    private static final String currentQuarter = \"wi\";\n\n    private MessageListener realListener;\n    private Message myStudentData;\n\n    private Spinner filterSpinner;\n    private Spinner thisYearSpinner;\n    private Spinner thisQuarterSpinner;\n    private AppDatabase db;\n\n    private UUID currentSessionId;\n\n    private UUID userId;\n    private StudentWithClasses user;\n    private Set<Class> userClasses;\n\n    private RecyclerView studentsRecyclerView;\n    private RecyclerView.LayoutManager studentsLayoutManager;\n    private StudentViewAdapter studentsViewAdapter;\n    private ExecutorService backgroundThreadExecutor = Executors.newSingleThreadExecutor();\n\n    private boolean searching = false;\n    private boolean fromStartPage = false;\n    private boolean stopSearch = false;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_student_with_similar_classes);\n\n        filterSpinner = (Spinner) findViewById(R.id.filter_select);\n        ArrayAdapter<CharSequence> filterAdapter = ArrayAdapter.createFromResource(this,\n                R.array.filters_array, android.R.layout.simple_spinner_item);\n        filterAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        filterSpinner.setAdapter(filterAdapter);\n\n        thisYearSpinner = (Spinner) findViewById(R.id.year_select);\n        ArrayAdapter<CharSequence> yearAdapter = ArrayAdapter.createFromResource(this,\n                R.array.years_array, android.R.layout.simple_spinner_item);\n        yearAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        thisYearSpinner.setAdapter(yearAdapter);\n\n        thisQuarterSpinner = (Spinner) findViewById(R.id.quarter_select);\n        ArrayAdapter<CharSequence> quarterAdapter = ArrayAdapter.createFromResource(this,\n                R.array.quarters_array, android.R.layout.simple_spinner_item);\n        quarterAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        thisQuarterSpinner.setAdapter(quarterAdapter);\n\n        db = AppDatabase.singleton(getApplicationContext());\n\n        SharedPreferences preferences = Utils.getSharedPreferences(this);\n\n        // get session and user id from preferences\n        if(preferences.contains(\"current_session_id\")) {\n            String sessionUUIDString = preferences.getString(\"current_session_id\", \"\");\n            currentSessionId = UUID.fromString(sessionUUIDString);\n        }\n\n        String UUIDString = preferences.getString(\"student_id\", \"\");\n        userId = UUID.fromString(UUIDString);\n\n        user = db.studentWithClassesDao().getStudent(userId);\n        userClasses = user.getClasses();\n\n        clearRecycler();\n        setUpNearby();\n    }\n\n    protected void refreshRecycler(){\n        backgroundThreadExecutor.submit(() -> {\n            List<Student> userClassmates = findPriorClassmates();\n\n            runOnUiThread(() -> {\n                // Set up the recycler view to show our database contents\n                studentsRecyclerView = findViewById(R.id.persons_view);\n\n                studentsLayoutManager = new LinearLayoutManager(this);\n                studentsRecyclerView.setLayoutManager(studentsLayoutManager);\n\n                studentsViewAdapter = new StudentViewAdapter(userClassmates);\n                studentsRecyclerView.setAdapter(studentsViewAdapter);\n            });\n        });\n    }\n\n    protected void clearRecycler(){\n        backgroundThreadExecutor.submit(() -> {\n            runOnUiThread(() -> {\n                // Set up the recycler view to show our database contents\n                studentsRecyclerView = findViewById(R.id.persons_view);\n\n                studentsLayoutManager = new LinearLayoutManager(this);\n                studentsRecyclerView.setLayoutManager(studentsLayoutManager);\n\n                studentsViewAdapter = new StudentViewAdapter(new ArrayList<>());\n                studentsRecyclerView.setAdapter(studentsViewAdapter);\n            });\n        });\n    }\n\n    protected List<Student> findPriorClassmates() {\n        SessionWithStudents mySession = db.sessionWithStudentsDao().getSession(currentSessionId);\n        List<Student> sessionStudents = mySession.getStudents();\n        sessionStudents.remove(user.getStudent());\n        List<StudentWithClasses> studentList = new ArrayList<StudentWithClasses>();\n        for(Student student : sessionStudents) {\n            studentList.add(db.studentWithClassesDao().getStudent(student.getId()));\n        }\n\n        List<Student> commonClassmates = new ArrayList<>();\n\n        PriorityQueue<StudentWithClasses> pq = new PriorityQueue<>(1000, new StudentComparator());\n        String filterString = filterSpinner.getSelectedItem().toString();\n        String thisYearString = thisYearSpinner.getSelectedItem().toString();\n        String thisQuarterString = thisQuarterSpinner.getSelectedItem().toString().toLowerCase();\n\n        if (filterString.equals(\"prioritize recent\")) {\n            pq = new PriorityQueue<>(1000, new StudentClassRecencyComparator());\n        }\n        else if (filterString.equals(\"prioritize small classes\")) {\n            // pq = new PriorityQueue<>(1000, new StudentClassSizeComparator());\n        }\n        else if (filterString.equals(\"this quarter only\")) {\n            pq = new PriorityQueue<>(1000, new StudentThisQuarterComparator());\n            for (StudentWithClasses classmate : studentList) {\n                if (countSimilarClasses(classmate) > 0) {\n                    Set<Class> classList = getSimilarClasses(classmate);\n                    for (Class course : classList) {\n                        if (course.getYear() == Integer.parseInt(thisYearString) && course.getQuarter().equals(thisQuarterString)) {\n                            pq.add(classmate);\n                            break;\n                        }\n                    }\n                }\n            }\n            while (!pq.isEmpty()) {\n                commonClassmates.add(pq.poll().getStudent());\n            }\n            return commonClassmates;\n        }\n\n        for (StudentWithClasses classmate : studentList) {\n            if (countSimilarClasses(classmate) > 0) {\n                pq.add(classmate);\n            }\n        }\n        while (!pq.isEmpty()) {\n            commonClassmates.add(pq.poll().getStudent());\n        }\n        return commonClassmates;\n    }\n\n    protected int countSimilarClasses(StudentWithClasses classmate){\n        Set<Class> mateClasses = classmate.getClasses();\n\n        mateClasses.retainAll(userClasses);\n\n        return mateClasses.size();\n    }\n\n    protected Set<Class> getSimilarClasses(StudentWithClasses classmate) {\n        Set<Class> mateClasses = classmate.getClasses();\n        mateClasses.retainAll(userClasses);\n        return mateClasses;\n    }\n\n    public int calculatePosition (Student classmate) {\n        user = db.studentWithClassesDao().getStudent(userId);\n        userClasses = user.getClasses();\n        List<Student> userClassmates = findPriorClassmates();\n        for(int i=0; i<userClassmates.size(); i++) {\n            if(userClassmates.get(i).getId().equals(classmate.getId())){\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public void onToggleClicked(View view) {\n        if(searching)\n            this.onStopClicked();\n        else\n            this.onStartClicked();\n        searching = !searching;\n    }\n\n    protected void onStartClicked(){\n        Button toggle_button = findViewById(R.id.toggle_search_button);\n        toggle_button.setText(\"Stop Search\");\n        this.fromStartPage = true;\n        Intent intent3 = new Intent(this, CourseDashboard.class);\n        startActivity(intent3);\n    }\n\n    protected void onStopClicked(){\n        Button toggle_button = findViewById(R.id.toggle_search_button);\n        toggle_button.setText(\"Start Search\");\n        this.stopNearby();\n\n        if (!(db.sessionDao().checkNamed(currentSessionId))) {\n            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);\n\n            // set title\n            alertDialogBuilder.setTitle(\"Save your class\");\n\n            // set dialog message\n            alertDialogBuilder\n                    .setMessage(\"Name it as a class you take this quarter or give it a new name\")\n                    .setCancelable(false)\n                    .setPositiveButton(\"Choose a class\", null)\n                    .setNegativeButton(\"Give it a name\", new DialogInterface.OnClickListener() {\n                        public void onClick(DialogInterface dialog, int id) {\n                            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(SearchStudentWithSimilarClasses.this);\n\n                            LinearLayout layout = new LinearLayout(SearchStudentWithSimilarClasses.this);\n                            layout.setOrientation(LinearLayout.VERTICAL);\n\n                            final EditText editTextCourse = new EditText(SearchStudentWithSimilarClasses.this);\n                            editTextCourse.setHint(\"Subject + Course Number\");\n                            layout.addView(editTextCourse);\n\n\n                            // set title\n                            alertDialogBuilder.setTitle(\"Save your class\");\n                            alertDialogBuilder.setView(layout);\n\n                            // set dialog message\n                            alertDialogBuilder\n                                    .setCancelable(false)\n                                    .setPositiveButton(\"Save\", null);\n\n                            // create alert dialog\n                            AlertDialog alertDialog = alertDialogBuilder.create();\n\n                            // show it\n                            alertDialog.show();\n\n                            Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);\n                            positiveButton.setOnClickListener(new View.OnClickListener() {\n                                @Override\n                                public void onClick(View view) {\n\n                                    String className = editTextCourse.getText().toString().toLowerCase();\n                                    if (className.length() > 0) {\n                                        db.sessionDao().updateName(currentSessionId, className);\n                                        Log.d(TAG, \"Named session to \" + db.sessionDao().getName(currentSessionId));\n                                        Toast.makeText(SearchStudentWithSimilarClasses.this, \"save as new session\", Toast.LENGTH_SHORT).show();\n                                        alertDialog.dismiss();\n                                    }\n                                    else {\n                                        Toast.makeText(getApplicationContext(), \"Please enter subject and course number!\", Toast.LENGTH_SHORT).show();\n                                    }\n                                }\n                            });\n                        }\n                    });\n\n            // create alert dialog\n            AlertDialog alertDialog = alertDialogBuilder.create();\n\n            // show it\n            alertDialog.show();\n\n            Button positiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);\n            positiveButton.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View view) {\n\n\n                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(SearchStudentWithSimilarClasses.this);\n\n                    final Spinner classSpinner = new Spinner(SearchStudentWithSimilarClasses.this);\n\n                    List<String> spinnerArray = new ArrayList<>();\n\n                    String thisYearString = thisYearSpinner.getSelectedItem().toString();\n                    String thisQuarterString = thisQuarterSpinner.getSelectedItem().toString().toLowerCase();\n\n                    userClasses = user.getClasses();\n                    for (Class course : userClasses) {\n\n                        if (course.getYear() == Integer.parseInt(thisYearString) && course.getQuarter().equals(thisQuarterString)) {\n                            String courseString = course.getSubject() + \" \" + course.getCourseNumber();\n                            spinnerArray.add(courseString);\n                        }\n                    }\n\n                    if (!spinnerArray.isEmpty()) {\n                        ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<String>\n                                (SearchStudentWithSimilarClasses.this, android.R.layout.simple_spinner_item, spinnerArray); //selected item will look like a spinner set from XML\n                        spinnerArrayAdapter.setDropDownViewResource(android.R.layout\n                                .simple_spinner_dropdown_item);\n                        classSpinner.setAdapter(spinnerArrayAdapter);\n\n                        // set title\n                        alertDialogBuilder.setTitle(\"Choose a class\");\n                        alertDialogBuilder.setView(classSpinner);\n\n                        alertDialogBuilder\n                                .setCancelable(false)\n                                .setPositiveButton(\"Enter\", new DialogInterface.OnClickListener() {\n                                    @Override\n                                    public void onClick(DialogInterface dialogInterface, int i) {\n                                        String className = classSpinner.getSelectedItem().toString().toLowerCase();\n                                        db.sessionDao().updateName(currentSessionId, className);\n                                        Log.d(TAG, \"Named session to \" + db.sessionDao().getName(currentSessionId));\n                                        Toast.makeText(SearchStudentWithSimilarClasses.this, \"save as a this quarter's session\", Toast.LENGTH_SHORT).show();\n                                        alertDialog.dismiss();\n                                    }\n                                });\n\n                        // create alert dialog\n                        AlertDialog alertDialog = alertDialogBuilder.create();\n\n                        // show it\n                        alertDialog.show();\n                    }\n                    else {\n                        Toast.makeText(getApplicationContext(), \"You don't have class in this quarter!\", Toast.LENGTH_SHORT).show();\n                    }\n                }\n            });\n        }\n        else {\n            Toast.makeText(SearchStudentWithSimilarClasses.this, \"save to existing session\", Toast.LENGTH_SHORT).show();\n        }\n\n        SharedPreferences preferences = Utils.getSharedPreferences(this);\n        preferences.edit().remove(\"current_session_id\").commit();\n        clearRecycler();\n    }\n\n    protected void setUpNearby(){\n        this.realListener = new MessageListener() {\n            @Override\n            public void onFound(@NonNull Message message) {\n                String messageContent = new String(message.getContent());\n                Log.d(TAG, messageContent);\n                String[] decodedMessage = messageContent.split(\",\");\n\n                UUID studentUUID = UUID.fromString(decodedMessage[0]);\n                String name = decodedMessage[1];\n                String pictureURL = decodedMessage[2];\n\n                // if student exists in database\n                if(db.studentDao().checkExists(studentUUID)){\n                    SessionStudent studentInSession = new SessionStudent(currentSessionId, studentUUID);\n                    db.sessionStudentDao().insert(studentInSession);\n                    return;\n                }\n\n                Bitmap image = Utils.urlToBitmap(SearchStudentWithSimilarClasses.this, pictureURL);\n\n                Student classmate = new Student(studentUUID, name, image);\n                db.studentDao().insert(classmate);\n\n                SessionStudent studentInSession = new SessionStudent(currentSessionId, studentUUID);\n                db.sessionStudentDao().insert(studentInSession);\n\n                for(int i = 3; i < decodedMessage.length; i+=6) {\n                    UUID classId = UUID.fromString(decodedMessage[i]);\n                    int year = Integer.parseInt(decodedMessage[i + 1]);\n                    String quarter = decodedMessage[i + 2];\n                    String subject = decodedMessage[i + 3];\n                    String courseNumber = decodedMessage[i + 4];\n                    String courseSize = decodedMessage[i + 5];\n\n                    Class newClass = new Class(classId, studentUUID, year, quarter, subject, courseNumber, courseSize);\n                    db.classesDao().insert(newClass);\n                }\n\n                int listPosition = calculatePosition(classmate);\n                studentsViewAdapter.addStudent(listPosition, classmate);\n            }\n\n            @Override\n            public void onLost(@NonNull Message message) {\n                Log.d(TAG, \"Lost sight of message: \" + new String(message.getContent()));\n            }\n        };\n\n        SharedPreferences preferences = Utils.getSharedPreferences(this);\n\n        String studentUUIDString = preferences.getString(\"student_id\", \"default\");\n        UUID studentUUID = UUID.fromString(studentUUIDString);\n        List<Class> classes = db.classesDao().getForStudent(studentUUID);\n\n        String encodedString = Utils.encodeStudent(this) + \",\" + Utils.encodeClasses(classes);\n        myStudentData = new Message(encodedString.getBytes(StandardCharsets.UTF_8));\n    }\n\n    protected void startNearby(){\n        Nearby.getMessagesClient(this).subscribe(realListener);\n        Nearby.getMessagesClient(this).publish(myStudentData);\n        Log.d(TAG, \"Started Nearby Searching\");\n    }\n\n    protected void stopNearby(){\n        Nearby.getMessagesClient(this).unsubscribe(realListener);\n        Nearby.getMessagesClient(this).unpublish(myStudentData);\n        Log.d(TAG, \"Stopped Nearby Searching\");\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        stopNearby();\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n\n        SharedPreferences preferences = Utils.getSharedPreferences(this);\n        if(preferences.contains(\"current_session_id\")) {\n            String sessionUUIDString = preferences.getString(\"current_session_id\", \"\");\n            currentSessionId = UUID.fromString(sessionUUIDString);\n        }\n\n        if(this.fromStartPage){\n            this.startNearby();\n            this.fromStartPage = false;\n        }\n\n        refreshRecycler();\n    }\n\n    public void onAddStudentsClicked(View view){\n        Intent addStudentsIntent = new Intent(this, AddStudentActivity.class);\n        startActivity(addStudentsIntent);\n    }\n\n    public void saveStudent(List<Student> s, String sessionName){\n        UUID sessionId = UUID.randomUUID();\n        Session newS = new Session(sessionId);\n        newS.setName(sessionName);\n        db.sessionDao().insert(newS);\n        for(Student eachStudent : s){\n            UUID studentId = eachStudent.getId();\n            db.sessionStudentDao().insert(new SessionStudent(studentId, sessionId));\n        }\n    }\n\n    public ArrayList<Class> sortClasses(Set<Class> list, PriorityQueue<Class> pq) {\n        ArrayList<Class> classList = new ArrayList<>();\n        for (Class course : list) {\n            pq.add(course);\n        }\n        while (!pq.isEmpty()) {\n            classList.add(pq.poll());\n        }\n        return classList;\n    }\n\n    class StudentComparator implements Comparator<StudentWithClasses> {\n        @Override\n        public int compare(StudentWithClasses student1, StudentWithClasses student2) {\n            if (countSimilarClasses(student1) > countSimilarClasses(student2)) {\n                return -1;\n            }\n            else {\n                return 1;\n            }\n        }\n    }\n\n    /*\n    class StudentClassSizeComparator implements Comparator<StudentWithClasses> {\n        public int compare (StudentWithClasses student1, StudentWithClasses student2) {\n            PriorityQueue<Class> pq = new PriorityQueue<>(1000, new ClassSizeComparator());\n            ArrayList<Class> s1_classes_sorted = sortClasses(getSimilarClasses(student1), pq);\n            ArrayList<Class> s2_classes_sorted = sortClasses(getSimilarClasses(student2), pq);\n\n            int index = 0;\n            int s1_num_classes = s1_classes_sorted.size();\n            int s2_num_classes = s2_classes_sorted.size();\n\n            while (index < s1_num_classes && index < s2_num_classes) {\n                Class class1 = s1_classes_sorted.get(index);\n                Class class2 = s2_classes_sorted.get(index);\n\n                if (Utils.getClassSize(class1.getSize()) < Utils.getClassSize(class2.getSize())) {\n                    return -1;\n                }\n                else if (Utils.getClassSize(class1.getSize()) > Utils.getClassSize(class2.getSize())) {\n                    return 1;\n                }\n                index++;\n            }\n\n            if (s1_num_classes > s2_num_classes) {\n                return -1;\n            }\n            else {\n                return 1;\n            }\n        }\n    }\n\n    class ClassSizeComparator implements Comparator<Class> {\n        @Override\n        public int compare(Class class1, Class class2) {\n            if (Utils.getClassSize(class1.getSize()) < Utils.getClassSize(class2.getSize())) {\n                return -1;\n            }\n            else {\n                return 1;\n            }\n        }\n    }\n     */\n\n    class StudentClassRecencyComparator implements Comparator<StudentWithClasses> {\n        @Override\n        public int compare(StudentWithClasses student1, StudentWithClasses student2) {\n            return student1.getStudent().getRecencyScore() - student2.getStudent().getRecencyScore();\n//\n//            PriorityQueue<Class> pq = new PriorityQueue<>(1000, new ClassRecencyComparator());\n//            ArrayList<Class> s1_classes_sorted = sortClasses(getSimilarClasses(student1), pq);\n//            ArrayList<Class> s2_classes_sorted = sortClasses(getSimilarClasses(student2), pq);\n//\n//            int index = 0;\n//            int s1_num_classes = s1_classes_sorted.size();\n//            int s2_num_classes = s2_classes_sorted.size();\n//\n//            while (index < s1_num_classes && index < s2_num_classes) {\n//                int compareIndicator = (s1_classes_sorted.get(index)).compareTo(s2_classes_sorted.get(index));\n//\n//                if (compareIndicator > 0) {\n//                    return -1;\n//                }\n//                else if (compareIndicator < 0) {\n//                    return 1;\n//                }\n//                index++;\n//            }\n//\n//            if (s1_num_classes > s2_num_classes) {\n//                return -1;\n//            }\n//            else {\n//                return 1;\n//            }\n        }\n    }\n\n    class ClassRecencyComparator implements Comparator<Class> {\n        @Override\n        public int compare(Class class1, Class class2) {\n            if (class1.compareTo(class2) > 0) {\n                return -1;\n            }\n            else {\n                return 1;\n            }\n        }\n    }\n\n    class StudentThisQuarterComparator implements Comparator<StudentWithClasses> {\n        @Override\n        public int compare(StudentWithClasses student1, StudentWithClasses student2) {\n            Set<Class> s1_classes = getSimilarClasses(student1);\n            Set<Class> s2_classes = getSimilarClasses(student2);\n\n            String thisYearString = thisYearSpinner.getSelectedItem().toString();\n            String thisQuarterString = thisQuarterSpinner.getSelectedItem().toString().toLowerCase();\n\n            int s1_count = 0;\n\n            for (Class course : s1_classes) {\n                if (course.getYear() == Integer.parseInt(thisYearString) && course.getQuarter().equals(thisQuarterString)) {\n                    s1_count++;\n                }\n            }\n\n            int s2_count = 0;\n\n            for (Class course : s2_classes) {\n                if (course.getYear() == Integer.parseInt(thisYearString) && course.getQuarter().equals(thisQuarterString)) {\n                    s2_count++;\n                }\n            }\n\n            if (s1_count > s2_count) {\n                return -1;\n            }\n            else {\n                return 1;\n            }\n        }\n    }\n\n    public void onAddClassesClicked(View view){\n        Intent addClassesIntent = new Intent(this, AddClassesActivity.class);\n        startActivity(addClassesIntent);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/swift/birdsofafeather/SearchStudentWithSimilarClasses.java b/app/src/main/java/com/swift/birdsofafeather/SearchStudentWithSimilarClasses.java
--- a/app/src/main/java/com/swift/birdsofafeather/SearchStudentWithSimilarClasses.java	
+++ b/app/src/main/java/com/swift/birdsofafeather/SearchStudentWithSimilarClasses.java	
@@ -401,7 +401,8 @@
 
                 Bitmap image = Utils.urlToBitmap(SearchStudentWithSimilarClasses.this, pictureURL);
 
-                Student classmate = new Student(studentUUID, name, image);
+                Student
+                        = new Student(studentUUID, name, image);
                 db.studentDao().insert(classmate);
 
                 SessionStudent studentInSession = new SessionStudent(currentSessionId, studentUUID);
@@ -502,6 +503,27 @@
         return classList;
     }
 
+    public void setClassScore (StudentWithClasses student) {
+        Set<Class> classes = getSimilarClasses(student);
+
+
+    }
+
+    public void setSizeScore (StudentWithClasses student) {
+        Set<Class> classes = getSimilarClasses(student);
+        int score = 0;
+
+        for (Class course : classes) {
+            score += Utils.getClassSizeWeight(course.getCourseSize());
+        }
+
+        student.getStudent().setRecencyScore(score);
+    }
+
+    public void setRecencyScore (StudentWithClasses student) {
+        
+    }
+
     class StudentComparator implements Comparator<StudentWithClasses> {
         @Override
         public int compare(StudentWithClasses student1, StudentWithClasses student2) {
@@ -594,6 +616,8 @@
         }
     }
 
+
+
     class ClassRecencyComparator implements Comparator<Class> {
         @Override
         public int compare(Class class1, Class class2) {
Index: app/src/main/java/com/swift/birdsofafeather/model/db/Student.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.swift.birdsofafeather.model.db;\n\nimport android.graphics.Bitmap;\n\nimport androidx.annotation.NonNull;\nimport androidx.room.ColumnInfo;\nimport androidx.room.Entity;\nimport androidx.room.PrimaryKey;\n\nimport java.util.UUID;\n\n@Entity(tableName = \"students\")\npublic class Student {\n    @PrimaryKey\n    @ColumnInfo(name = \"student_id\")\n    public UUID studentId;\n\n    @ColumnInfo(name = \"name\")\n    public String name;\n\n    @ColumnInfo(name = \"profile_picture\")\n    public Bitmap picture;\n\n    @ColumnInfo(name = \"class_score\")\n    public int classScore;\n\n    @ColumnInfo(name = \"recency_score\")\n    public int recencyScore;\n\n    @ColumnInfo(name = \"size_score\")\n    public double sizeScore;\n\n    public Student (UUID studentId, String name, Bitmap picture){\n        this.studentId = studentId;\n        this.name = name;\n        this.picture = picture;\n        this.classScore = 0;\n        this.recencyScore = 0;\n        this.sizeScore = 0.0;\n    }\n\n    @Override\n    public boolean equals(Object o){\n        if (this == o)\n            return true;\n        if (o == null || getClass() != o.getClass())\n            return false;\n\n        Student other = (Student) o;\n\n        return this.studentId.equals(other.studentId) &&\n                this.name.equals(other.name);\n     }\n\n    public UUID getId() { return studentId; }\n\n    public String getName() { return name; }\n\n    public Bitmap getPicture() { return picture; }\n\n    @NonNull\n    @Override\n    public String toString() { return studentId + \",\" + name; }\n\n    public int getClassScore() { return classScore; }\n\n    public int getRecencyScore() { return recencyScore; }\n\n    public double getSizeScore() { return sizeScore; }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/swift/birdsofafeather/model/db/Student.java b/app/src/main/java/com/swift/birdsofafeather/model/db/Student.java
--- a/app/src/main/java/com/swift/birdsofafeather/model/db/Student.java	
+++ b/app/src/main/java/com/swift/birdsofafeather/model/db/Student.java	
@@ -67,4 +67,11 @@
     public int getRecencyScore() { return recencyScore; }
 
     public double getSizeScore() { return sizeScore; }
+
+    public void setClassScore(int score) { this.classScore = score; }
+
+    public void setRecencyScore(int score) { this.recencyScore = score; }
+
+    public void setSizeScore(double score) { this.sizeScore = score; }
+
 }
